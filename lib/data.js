import {Buffer} from 'buffer'
import {UnicodeTrie} from '@cto.af/unicode-trie'

export const generatedDate = new Date('2023-07-02T05:19:40.130Z')
export const Trie = new UnicodeTrie(Buffer.from(
  `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
   HqEAiwCAW10D`,
  'base64'
))

/**
 * @type {Record<string, number>}
 */
export const names = Object.fromEntries(
  Trie.values.map((v, i) => [v, i])
)
export const {values} = Trie
